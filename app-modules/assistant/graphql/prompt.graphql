type Prompt @model(class: "AidingApp\\Assistant\\Models\\Prompt") {
    id: UUID!

    title: String!

    description: String

    prompt: String!

    created_at: DateTime

    updated_at: DateTime

    type: PromptType! @belongsTo
}

input PromptsQuery {
    id: UUID

    title: String

    description: String

    prompt: String

    created_at: DateTime

    updated_at: DateTime

    type: PromptTypesQuery
}

type PromptQueries {
    "Get a specific prompt by ID."
    find(
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:prompts"])
    ): Prompt @find @softDeletes @canResolved(ability: "view")

    "List multiple prompts."
    list(
        "Filter by the prompts attributes and relations."
        where: PromptsQuery @searchBy
        order: PromptsQuery @sortBy
    ): [Prompt!]! @paginate @softDeletes @canModel(ability: "viewAny")
}

extend type Query {
    prompt: PromptQueries! @namespaced
}

input CreatePromptInput {
    "The title of the prompt."
    title: String!
        @rules(apply: ["required", "string", "max:255", "unique:prompts,title"])

    "The description of the prompt."
    description: String @rules(apply: ["nullable", "string", "max:65535"])

    "The text of the prompt."
    prompt: String! @rules(apply: ["required", "string", "max:65535"])

    "The type of the prompt."
    type_id: UUID! @rules(apply: ["nullable", "uuid", "exists:prompt_types,id"])
}

input UpdatePromptInput {
    "The title of the prompt."
    title: String
        @rules(apply: ["nullable", "string", "max:255", "unique:prompts,title"])

    "The description of the prompt."
    description: String @rules(apply: ["nullable", "string", "max:65535"])

    "The text of the prompt."
    prompt: String @rules(apply: ["nullable", "string", "max:65535"])

    "The type of the prompt."
    type_id: UUID @rules(apply: ["nullable", "uuid", "exists:prompt_types,id"])
}

type PromptMutations {
    "Create a new prompt."
    create(
        "The attributes to create a prompt."
        input: CreatePromptInput! @spread
    ): Prompt! @create @canModel(ability: "create")

    "Update an existing prompt."
    update(
        "The identifier of the prompt you would like to update."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:prompts"])

        "The attributes to update a prompt."
        input: UpdatePromptInput! @spread
    ): Prompt! @update @canFind(ability: "update", find: "id")

    "Delete an existing prompt."
    delete(
        "The identifier of the prompt you would like to delete."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:prompts"])
    ): Prompt @delete @canFind(ability: "delete", find: "id")
}

extend type Mutation {
    prompt: PromptMutations! @namespaced
}
