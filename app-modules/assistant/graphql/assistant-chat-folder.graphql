type AssistantChatFolder
  @model(class: "AidingApp\\Assistant\\Models\\AssistantChatFolder") {
  id: UUID!

  name: String!

  created_at: DateTime

  updated_at: DateTime

  user: User! @belongsTo

  chats: [AssistantChat!] @hasMany

  chats_count: Int! @count(relation: "chats")
}

input AssistantChatFoldersQuery {
  id: UUID

  name: String

  created_at: DateTime

  updated_at: DateTime

  user: UsersQuery

  chats: AssistantChatsQuery
}

type AssistantChatFolderQueries {
  "Get a specific assistant chat folder by ID."
  find(
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:assistant_chat_folders"])
  ): AssistantChatFolder @find

  "List multiple assistant chat folders."
  list(
    "Filter by the assistant chat folders attributes and relations."
    where: AssistantChatFoldersQuery @searchBy
    order: AssistantChatFoldersQuery @sortBy
  ): [AssistantChatFolder!]! @paginate
}

extend type Query {
  assistantChatFolder: AssistantChatFolderQueries! @namespaced
}

input CreateAssistantChatFolderInput {
  "The name of the assistant chat folder."
  name: String!
    @rules(
      apply: [
        "required"
        "string"
        "max:255"
        "AidingApp\\Assistant\\Rules\\UniqueAssistantChatFolderRule"
      ]
    )

  "The ID of the user that the assistant chat folder belongs to."
  user_id: UUID! @rules(apply: ["required", "uuid", "exists:users,id"])
}

input UpdateAssistantChatFolderInput {
  "The name of the assistant chat folder."
  name: String
    @rules(
      apply: [
        "nullable"
        "string"
        "max:255"
        "AidingApp\\Assistant\\Rules\\UniqueAssistantChatFolderRule"
      ]
    )
}

type AssistantChatFolderMutations {
  "Create a new assistant chat folder."
  create(
    "The attributes to create the assistant chat folder with."
    input: CreateAssistantChatFolderInput! @spread
  ): AssistantChatFolder @create

  "Update an existing assistant chat folder."
  update(
    "The ID of the assistant chat folder to update."
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:assistant_chat_folders"])

    "The attributes to update the assistant chat folder with."
    input: UpdateAssistantChatFolderInput! @spread
  ): AssistantChatFolder @update

  "Delete an existing assistant chat folder."
  delete(
    "The ID of the assistant chat folder to delete."
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:assistant_chat_folders"])
  ): AssistantChatFolder @delete
}

extend type Mutation {
  assistantChatFolder: AssistantChatFolderMutations! @namespaced
}
