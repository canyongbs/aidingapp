type AssistantChatMessage
    @model(class: "AidingApp\\Assistant\\Models\\AssistantChatMessage") {
    id: UUID!

    message: String!

    from: AIChatMessageFrom!

    created_at: DateTime

    updated_at: DateTime

    chat: AssistantChat! @belongsTo
}

input AssistantChatMessagesQuery {
    id: UUID

    message: String

    from: AIChatMessageFrom

    created_at: DateTime

    updated_at: DateTime

    chat: AssistantChatsQuery
}

type AssistantChatMessageQueries {
    "Get a specific assistant chat message by ID."
    find(
        id: UUID!
            @whereKey
            @rules(
                apply: ["required", "uuid", "exists:assistant_chat_messages"]
            )
    ): AssistantChatMessage @find @canResolved(ability: "view")

    "List multiple assistant chat messages."
    list(
        "Filter by the assistant chat messages attributes and relations."
        where: AssistantChatMessagesQuery @searchBy
        order: AssistantChatMessagesQuery @sortBy
    ): [AssistantChatMessage!]! @paginate @canModel(ability: "viewAny")
}

extend type Query {
    assistantChatMessage: AssistantChatMessageQueries! @namespaced
}
