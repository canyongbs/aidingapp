type AssistantChatMessageLog
  @model(class: "AidingApp\\Assistant\\Models\\AssistantChatMessageLog") {
  id: UUID!

  message: String!

  metadata: JSON!

  request: JSON!

  sent_at: DateTime!

  created_at: DateTime

  updated_at: DateTime

  user: User! @belongsTo
}

input AssistantChatMessageLogsQuery {
  id: UUID

  message: String

  metadata: JSON

  request: JSON

  sent_at: DateTime

  created_at: DateTime

  updated_at: DateTime

  user: UsersQuery
}

type AssistantChatMessageLogQueries {
  "Get a specific assistant chat message log by ID."
  find(
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:assistant_chat_message_logs"])
  ): AssistantChatMessageLog @find @canResolved(ability: "view")

  "List multiple assistant chat message logs."
  list(
    "Filter by the assistant chat message logs attributes and relations."
    where: AssistantChatMessageLogsQuery @searchBy
    order: AssistantChatMessageLogsQuery @sortBy
  ): [AssistantChatMessageLog!]! @paginate @canModel(ability: "viewAny")
}

extend type Query {
  assistantChatMessageLog: AssistantChatMessageLogQueries! @namespaced
}
