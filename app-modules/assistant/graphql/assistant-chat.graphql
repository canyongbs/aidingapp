type AssistantChat
    @model(class: "AidingApp\\Assistant\\Models\\AssistantChat") {
    id: UUID!

    name: String!

    created_at: DateTime

    updated_at: DateTime

    user: User! @belongsTo

    folder: AssistantChatFolder @belongsTo

    messages: [AssistantChatMessage!] @hasMany

    messages_count: Int! @count(relation: "messages")
}

input AssistantChatsQuery {
    id: UUID

    name: String

    created_at: DateTime

    updated_at: DateTime

    user: UsersQuery

    folder: AssistantChatFoldersQuery

    messages: AssistantChatMessagesQuery
}

type AssistantChatQueries {
    "Get a specific assistant chat by ID."
    find(
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:assistant_chats"])
    ): AssistantChat @find

    "List multiple assistant chats."
    list(
        "Filter by the assistant chats attributes and relations."
        where: AssistantChatsQuery @searchBy
        order: AssistantChatsQuery @sortBy
    ): [AssistantChat!]! @paginate
}

extend type Query {
    assistantChat: AssistantChatQueries! @namespaced
}

input CreateAssistantChatInput {
    "The name of the assistant chat."
    name: String! @rules(apply: ["required", "string", "max:255"])

    "The user that owns the assistant chat."
    user_id: UUID! @rules(apply: ["required", "uuid", "exists:users,id"])

    "The folder that the assistant chat belongs to."
    folder_id: UUID
        @rename(attribute: "assistant_chat_folder_id")
        @rules(apply: ["nullable", "uuid", "exists:assistant_chat_folders,id"])
}

input UpdateAssistantChatInput {
    "The name of the assistant chat."
    name: String @rules(apply: ["string", "max:255"])

    "The folder that the assistant chat belongs to."
    folder_id: UUID
        @rename(attribute: "assistant_chat_folder_id")
        @rules(apply: ["nullable", "uuid", "exists:assistant_chat_folders,id"])
}

type AssistantChatMutations {
    "Create a new assistant chat."
    create(
        "The attributes to create a assistant chat."
        input: CreateAssistantChatInput! @spread
    ): AssistantChat! @create

    "Update an existing assistant chat."
    update(
        "The identifier of the assistant chat you would like to update."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:assistant_chats"])

        "The attributes to update a chat."
        input: UpdateAssistantChatInput! @spread
    ): AssistantChat! @update

    "Delete an existing assistant chat."
    delete(
        "The identifier of the assistant chat you would like to delete."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:assistant_chats"])
    ): AssistantChat @delete
}

extend type Mutation {
    assistantChat: AssistantChatMutations! @namespaced
}
