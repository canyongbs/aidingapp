type ConsentAgreement
  @model(class: "AidingApp\\Consent\\Models\\ConsentAgreement") {
  id: UUID!

  type: ConsentAgreementType!

  title: String!

  description: String!

  body: String!

  created_at: DateTime

  updated_at: DateTime

  deleted_at: DateTime

  audits: [Audit!] @hasMany

  audits_count: Int @count(relation: "audits")

  user_consent_agreements: [UserConsentAgreement!]
    @hasMany(relation: "userConsentAgreements")

  user_consent_agreements_count: Int @count(relation: "userConsentAgreements")

  users: [User!]! @belongsToMany

  users_count: Int @count(relation: "users")
}

input ConsentAgreementsQuery {
  id: UUID

  type: ConsentAgreementType

  title: String

  description: String

  body: String

  created_at: DateTime

  updated_at: DateTime

  deleted_at: DateTime

  user_consent_agreements: UserConsentAgreementsQuery

  users: UsersQuery

  audits: AuditsQuery
}

type ConsentAgreementQueries {
  "Get a specific consent agreement by ID."
  find(
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:consent_agreements"])
  ): ConsentAgreement @find @softDeletes @canResolved(ability: "view")

  "List multiple consent agreements."
  list(
    "Filter by the consent agreements attributes and relations."
    where: ConsentAgreementsQuery @searchBy
    order: ConsentAgreementsQuery @sortBy
  ): [ConsentAgreement!]! @paginate @softDeletes @canModel(ability: "viewAny")
}

extend type Query {
  consentAgreement: ConsentAgreementQueries! @namespaced
}

input UpdateConsentAgreementInput {
  "The title of the consent agreement."
  title: String @rules(apply: ["nullable", "string", "max:255"])

  "The description of the consent agreement."
  description: String @rules(apply: ["nullable", "string", "max:65535"])

  "The body of the consent agreement."
  body: String @rules(apply: ["nullable", "string", "max:65535"])

  users: UpdateUserConsentAgreementBelongsToManyInput
}

input UpdateUserConsentAgreementBelongsToManyInput {
  consent: [UUID!]
}

type ConsentAgreementMutations {
  "Update an existing consent agreement."
  update(
    "The identifier of the consent agreement you would like to update."
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:consent_agreements"])

    "The attributes to update a consent agreement."
    input: UpdateConsentAgreementInput! @spread
  ): ConsentAgreement!
    @canFind(ability: "update", find: "id")
    @field(
      resolver: "AidingApp\\Consent\\GraphQL\\Mutations\\UpdateConsentAgreement"
    )

  "Consent a user to a consent agreement."
  consent(
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:consent_agreements"])
    user_id: UUID! @rules(apply: ["required", "uuid", "exists:users,id"])
  ): ConsentAgreement!
    @canFind(ability: "update", find: "id")
    @field(
      resolver: "AidingApp\\Consent\\GraphQL\\Mutations\\ConsentUserToConsentAgreement"
    )
}

extend type Mutation {
  consentAgreement: ConsentAgreementMutations! @namespaced
}
