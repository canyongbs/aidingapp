type InteractionType
  @model(class: "AidingApp\\Interaction\\Models\\InteractionType") {
  "Unique primary key."
  id: UUID!

  "The name of the interaction type."
  name: String!

  "Interactions related to this interaction type."
  interactions: [Interaction!] @hasMany

  "The created date of the interaction type."
  created_at: DateTime

  "The updated date of the interaction type."
  updated_at: DateTime

  "The deleted date of the interaction type."
  deleted_at: DateTime
}

input InteractionTypeQuery {
  "The unique primary key of the interaction type."
  id: UUID

  "The name of the interaction relation."
  name: String

  "The interactions related to this interaction type."
  interactions: InteractionsQuery

  "The created date of the interaction type."
  created_at: DateTime

  "The updated date of the interaction type."
  updated_at: DateTime

  "The deleted date of the interaction type."
  deleted_at: DateTime
}

type InteractionTypeQueries {
  "Get a specific interaction type by ID."
  find(
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:interaction_types"])
  ): InteractionType @find @softDeletes @canResolved(ability: "view")

  "List multiple interactions types."
  list(
    "Filter by the interaction types attributes and relations."
    where: InteractionTypeQuery @searchBy
  ): [InteractionType!]! @paginate @softDeletes @canModel(ability: "viewAny")
}

extend type Query {
  interactionType: InteractionTypeQueries! @namespaced
}

input CreateInteractionTypeInput {
  "The name of the interaction type."
  name: String!
    @rules(
      apply: ["required", "string", "max:255", "unique:interaction_types,name"]
    )
}

input UpdateInteractionTypeInput {
  "The name of the interaction type."
  name: String
    @rules(apply: ["string", "max:255", "unique:interaction_types,name"])
}

type InteractionTypeMutations {
  "Create an interaction type."
  create(input: CreateInteractionTypeInput! @spread): InteractionType!
    @create
    @canModel(ability: "create")

  "Update an existing interaction type."
  update(
    "The identifier of the interaction type you would like to update."
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:interaction_types"])

    "The fields you would like to update."
    input: UpdateInteractionTypeInput! @spread
  ): InteractionType! @canFind(ability: "update", find: "id") @update

  "Delete an existing interaction type."
  delete(
    "The identifier of the interaction type you would like to delete."
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:interaction_types"])
  ): InteractionType @canFind(ability: "delete", find: "id") @delete
}

extend type Mutation {
  interactionType: InteractionTypeMutations! @namespaced
}
