type InteractionDriver
  @model(class: "AidingApp\\Interaction\\Models\\InteractionDriver") {
  "Unique primary key."
  id: UUID!

  "The name of the interaction driver."
  name: String!

  "Interactions related to this interaction driver."
  interactions: [Interaction!] @hasMany

  "The created date of the interaction driver."
  created_at: DateTime

  "The updated date of the interaction driver."
  updated_at: DateTime

  "The deleted date of the interaction driver."
  deleted_at: DateTime
}

input InteractionDriverQuery {
  "The unique primary key of the interaction driver."
  id: UUID

  "The name of the interaction driver."
  name: String

  "The interactions related to this interaction driver."
  interactions: InteractionsQuery

  "The created date of the interaction driver."
  created_at: DateTime

  "The updated date of the interaction driver."
  updated_at: DateTime

  "The deleted date of the interaction driver."
  deleted_at: DateTime
}

type InteractionDriverQueries {
  "Get a specific interaction driver by ID."
  find(
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:interaction_drivers"])
  ): InteractionDriver @find @softDeletes @canResolved(ability: "view")

  "List multiple interactions drivers."
  list(
    "Filter by the interaction drivers attributes and relations."
    where: InteractionDriverQuery @searchBy
  ): [InteractionDriver!]! @paginate @softDeletes @canModel(ability: "viewAny")
}

extend type Query {
  interactionDriver: InteractionDriverQueries! @namespaced
}

input CreateInteractionDriverInput {
  "The name of the interaction driver."
  name: String!
    @rules(
      apply: [
        "required"
        "string"
        "max:255"
        "unique:interaction_drivers,name"
      ]
    )
}

input UpdateInteractionDriverInput {
  "The name of the interaction driver."
  name: String
    @rules(apply: ["string", "max:255", "unique:interaction_drivers,name"])
}

type InteractionDriverMutations {
  "Create an interaction driver."
  create(input: CreateInteractionDriverInput! @spread): InteractionDriver!
    @create
    @canModel(ability: "create")

  "Update an existing interaction driver."
  update(
    "The identifier of the interaction driver you would like to update."
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:interaction_drivers"])

    "The fields you would like to update."
    input: UpdateInteractionDriverInput! @spread
  ): InteractionDriver! @canFind(ability: "update", find: "id") @update

  "Delete an existing interaction driver."
  delete(
    "The identifier of the interaction driver you would like to delete."
    id: UUID!
      @whereKey
      @rules(apply: ["required", "uuid", "exists:interaction_drivers"])
  ): InteractionDriver @canFind(ability: "delete", find: "id") @delete
}

extend type Mutation {
  interactionDriver: InteractionDriverMutations! @namespaced
}
