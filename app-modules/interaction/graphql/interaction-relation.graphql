type InteractionRelation
    @model(class: "AidingApp\\Interaction\\Models\\InteractionRelation") {
    "Unique primary key."
    id: UUID!

    "The name of the interaction relation."
    name: String!

    "Interactions related to this interaction relation."
    interactions: [Interaction!] @hasMany

    "The created date of the interaction relation."
    created_at: DateTime

    "The updated date of the interaction relation."
    updated_at: DateTime

    "The deleted date of the interaction relation."
    deleted_at: DateTime
}

input InteractionRelationQuery {
    "The unique primary key of the interaction relation."
    id: UUID

    "The name of the interaction relation."
    name: String

    "The interactions related to this interaction relation."
    interactions: InteractionsQuery

    "The created date of the interaction relation."
    created_at: DateTime

    "The updated date of the interaction relation."
    updated_at: DateTime

    "The deleted date of the interaction relation."
    deleted_at: DateTime
}

type InteractionRelationQueries {
    "Get a specific interaction relation by ID."
    find(
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:interaction_relations"])
    ): InteractionRelation @find @softDeletes @canResolved(ability: "view")

    "List multiple interactions relations."
    list(
        "Filter by the interaction relations attributes and relations."
        where: InteractionRelationQuery @searchBy
    ): [InteractionRelation!]!
        @paginate
        @softDeletes
        @canModel(ability: "viewAny")
}

extend type Query {
    interactionRelation: InteractionRelationQueries! @namespaced
}

input CreateInteractionRelationInput {
    "The name of the interaction relation."
    name: String!
        @rules(
            apply: [
                "required"
                "string"
                "max:255"
                "unique:interaction_relations,name"
            ]
        )
}

input UpdateInteractionRelationInput {
    "The name of the interaction relation."
    name: String
        @rules(
            apply: ["string", "max:255", "unique:interaction_relations,name"]
        )
}

type InteractionRelationMutations {
    "Create an interaction relation."
    create(
        input: CreateInteractionRelationInput! @spread
    ): InteractionRelation! @create @canModel(ability: "create")

    "Update an existing interaction relation."
    update(
        "The identifier of the interaction relation you would like to update."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:interaction_relations"])

        "The fields you would like to update."
        input: UpdateInteractionRelationInput! @spread
    ): InteractionRelation! @canFind(ability: "update", find: "id") @update

    "Delete an existing interaction relation."
    delete(
        "The identifier of the interaction relation you would like to delete."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:interaction_relations"])
    ): InteractionRelation @canFind(ability: "delete", find: "id") @delete
}

extend type Mutation {
    interactionRelation: InteractionRelationMutations! @namespaced
}
