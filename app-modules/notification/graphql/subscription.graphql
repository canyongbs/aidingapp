type UserSubscription
    @model(class: "AdvisingApp\\Notification\\Models\\Subscription") {
    "Unique primary key."
    id: UUID!
    "The User related to this subscription."
    user: User! @belongsTo
    "The Subscribable the User is subscribed to."
    subscribable: Educatable! @morphTo
    "The created date of the subscription."
    created_at: DateTime
    "The updated date of the subscription."
    updated_at: DateTime
}

input UserSubscriptionSubscribablesQuery {
    student: StudentsQuery
    contact: ContactsQuery
}

input SubscriptionsQuery {
    id: UUID
    user: UsersQuery
    subscribable: UserSubscriptionSubscribablesQuery @morphToRelation
    subscribable_id: EducatableId
    subscribable_type: EducatableType
    created_at: DateTime
    updated_at: DateTime
}

type UserSubscriptionQueries {
    "Find a single subscription by an identifying attribute."
    find(
        "The value of the attribute to match."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:subscriptions"])
    ): UserSubscription @find @canResolved(ability: "view")

    "List multiple subscriptions."
    list(where: SubscriptionsQuery @searchBy): [UserSubscription!]!
        @paginate
        @canModel(ability: "viewAny")
}

extend type Query {
    subscription: UserSubscriptionQueries! @namespaced
}

input CreateUserSubscriptionInput {
    "The user to subscribe."
    user_id: UUID!
        @rules(
            apply: [
                "required"
                "exists:users,id"
                "AdvisingApp\\Notification\\Rules\\UniqueSubscriptionRule"
            ]
        )

    "The subscribable to subscribe to."
    subscribable_id: EducatableId!
        @rules(
            apply: [
                "required"
                "AdvisingApp\\Notification\\Rules\\SubscribableIdExistsRule"
            ]
        )

    "The type of subscribable to subscribe to."
    subscribable_type: EducatableType!
        @rules(apply: ["required", "in:student,contact"])
}

type UserSubscriptionMutations {
    "Subscribe a User to a Subscribable."
    subscribe(input: CreateUserSubscriptionInput! @spread): UserSubscription!
        @create
        @canModel(ability: "create")

    "Unsubscribe a User from a Subscribable."
    unsubscribe(
        "The primary key of the subscription."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:subscriptions"])
    ): UserSubscription @delete @canFind(ability: "delete", find: "id")
}

extend type Mutation {
    subscription: UserSubscriptionMutations! @namespaced
}
